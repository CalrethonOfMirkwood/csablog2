{
  
    
        "post0": {
            "title": "12/13 CS/Technical Buisness Notes",
            "content": "Both met Mr. Mort through Qualcomm . Kathyleen Beveridge . Pretty much autobiography | Born in Vietnam, moved to SoCal | Sr. Director Global Commercial &amp; Marketing Operations at Thermo Fisher Scientific Also worked at Hewlett-Packard and Qualcomm | . | Every career helps others | Current career evolution is quite different from original major | Continuous learning as career evolves | . Kris Porter . Currently works at Twitter | Graduated from UCLA First CS class was in second quarter of first year, he failed the first class but retook it and succeeded because of continuous effort | . | Post-bachelor research was hierable leverage (is there such thing as a personal UVP?) | Twitter can search through your entire post history (including images) and create a suggestion list in 200 miliseconds | Continuous learning: Twitter university | Cisco CCNA | Python Udemy course | Learned machine learning and deep learning at Qualcomm | . | Literally just learning how to work at Twitter for 3 weeks | . Common Points . CONTINUOUS LEARNING NEVER STOP LEARNING | EVERY SECOND OF THE DAY YOU ARE LEARNING | HAVE YOU LEARNED ANYTHING NEW TODAY??!??! NO? GO LEARN SOMETHING!!! | YES? ALSO GO LEARN SOMETHING!!! | . | Tech career paths are especially supportive of, arguably even require, continuous learning | . | Benefit Others Both speakers&#39; work (debatably) improved the lives of others | Qualcomm products are used by millions of people daily | Same for Twitter | . | . Takeaway . To be honest I&#39;m not particularly interested in any office job but learning about CS general was a valuable experience, especially the idea of continuous leanring. It&#39;s particularly important in CS, but every industry requires flexibility and new learning to some degree. So is collaboration, another thing that I should take note of. .",
            "url": "https://calrethonofmirkwood.github.io/csablog2/jupyter/2022/12/13/presentationnotes.html",
            "relUrl": "/jupyter/2022/12/13/presentationnotes.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Notes",
            "content": "Unit 1: Primitives . Java is an object oriented language has primitive and non-primitive data types | . | Primitives vs. Non-Primitives | . Primitives Non-Primitives . predefined | done by you | . lowercase | Uppercase | . &quot;Primitives&quot; | &quot;Reference types&quot; | . cannot call methods | can call methods | . has to have value | can be null | . different size based on which primitive it is | all same size | . Numeric operators: . + is addition | - is subtraction | / is division | % is modulus (find remainder) | * is multiplication | [variable name]++ adds 1 to the variable handy for loops | . | [variable name]+=[number] adds [number] to the variable | [variable name]-=[number] subtracts [number] from the variable | . char demoChar = &#39;h&#39;; // String demoString = &quot;hihihello&quot;; // uppercase, so non-primitive reference type! // strings are collections of the primitive char data type // Demo of ++ int a, b, c = 0; for (int i=0; i&lt;5; i++) { // loop repeats while i is less than 5, i increases by one after every iteration a++; // should add 1 five times b+=5; // should add 5 five times c-=4; // should subtract 4 five times } // check to see if it worked System.out.println(&quot;a is &quot;+a); System.out.println(&quot;b is &quot;+b); System.out.println(&quot;c is &quot;+c); . a is 5 b is 25 c is -20 . Unit 2 . Object-oriented programming (OOP) is a programming paradigm that organizes software design around objects Data and functions that operate on said data are bound together | . | Classes are template from which objects are created | Objects are instances of a class | Functions, or methods, are sets of code that perform a specific task | The generic class fruit could contain objects like apple, banana, orange, etc. Class to object : Bird to duck | . | Classes have contstructors, the parts of the class that make an object when called | . Unit 3: Boolean Expressions and If Statements . IF, IF/ELSE, Boolean Statments, and Logic Gates . An If statement is a conditional statement that, when true, runs the code inside the statement. | . // runs if true if (true) System.out.println(&quot;Hi&quot;); //true and not false so system prints out &quot;Hello&quot; if (true &amp;&amp; !false) System.out.println(&quot;Hello&quot;); . Hi Hello . If/Else statements run If, and if If is not true, then Else is run Can be stacked as so: | . | . int x = 9; //false conditions until last else if statement so that one runs if (x&lt;2) System.out.println(&quot;Less than 2&quot;); else if (x&lt;4) System.out.println(&quot;Less than 4&quot;); else if (x&lt;6) System.out.println(&quot;Less than 6&quot;); else if (x&lt;8) System.out.println(&quot;Less than 8&quot;); else if (x&lt;10) System.out.println(&quot;Less than 10&quot;); else System.out.println(&quot;Greater than or equal to 10&quot;); . Less than 10 . Switch statements do same thing as if statement (control flow), but faster and more effectively | . Scanner inputStream = new Scanner(System.in); String userInputStr; int choice; System.out.println(&quot;choose an integer 1-5: &quot;); userInputStr = inputStream.nextLine(); choice = Integer.parseInt(userInputStr); System.out.println(choice); switch (choice) { //based on what the user inputted for the choice variable, different cases will run case 1: System.out.println(&quot; nyou chose one&quot;); break; case 2: System.out.println(&quot; nyou chose two&quot;); break; case 3: System.out.println(&quot; nyou chose three&quot;); break; //default prevents it from moving on to and running the following cases case 4: System.out.println(&quot; nyou chose four&quot;); break; case 5: System.out.println(&quot; nyou chose five&quot;); break; default: System.out.println(&quot;invalid input&quot;); } . choose an integer 1-5: 5 you chose five . Boolean expressions are statements that are either true or false | Boolean expressions can be used in if statements | Several operators: &lt;, &gt;, &gt;=, &lt;=, == | . if (45==45) System.out.println(&quot;1st case is true&quot;); // use two = rather than one to test equality if (45 &gt; 2) System.out.println(&quot;2nd case is true&quot;); if (45&gt;=45) System.out.println(&quot;3rd case is true&quot;); . Logic gates carry out logical operations Binary input, binary output | In actual hardware of computers | . | . ) . De Morgan&#39;s Law . Can you explain why the below code doesn&#39;t print anything? . // ps. what the booleans are set to are irrelevent Boolean amogi = true; Boolean banan = false; if ( !(amogi &amp;&amp; banan) == (!amogi &amp;&amp; !banan) ) { // why are the two conditions not equal? System.out.print(&quot;wait what?&quot;); // why is it not printing? } . De Morgan&#39;s law is a logical rule which states that the negation of a disjunction is the conjunction of the negations (and the converse that the negation of a conjunction is the disjunction of the negations). . In other words, this means that: . `not (A or B) = (not A) and (not B)&#39; . And the converse: `not (A and B) = (not A) or (not B)&#39; . Let&#39;s test De Morgan&#39;s law out: . // set booleans Boolean amogi = true; Boolean banan = false; if ( !(amogi || banan) == (!amogi &amp;&amp; !banan) ){ System.out.println(&quot;huh&quot;); } if ( !(amogi &amp;&amp; banan) == (!amogi || !banan) ){ System.out.print(&quot;wow this really works huh&quot;); } . Unit 4: Iteration . Iteraiton is repetition of code through loops College Board has two types of loops, while loop and for loop | . | Remember ++ and -- (increment and decrement operator) from Unit 2 | While loops repeat for the duration a condition is true: | . int i = 0; while (i &lt; 5) { // run ans long as i is less than 5 System.out.println(+i); i++; // increase i by 1, therefore runs 5 times } . 0 1 2 3 4 . int n = 0; boolean bool = true; //use boolean while (bool) { if (n == -3) bool = false; System.out.println(n); n--; } . 0 -1 -2 -3 . For loops repeat for a specified duration of time can be prematurely exited with break | . | . for (int i = 0; i &lt; 5; i++) System.out.println(i); . 0 1 2 3 4 . for (int i=0; i &lt; 5; i++) { System.out.println(i); if (i == 3) break; } . 0 1 2 3 . Recursion loops are loops that repeat themselves, such as Fibbonacci programs | . int result = sum(5, 10); System.out.println(result); public static int sum(int first, int last) { if (last &gt; first) return last + sum(first, last- 1); // sum calls itself else return last; } . Nested iteration is iteration within iteration, loop within a loop Useful for two-dimensional arrays or anything else with a structure of something within something else | . | . int weeks = 3; int days = 7; for (int i = 1; i &lt;= weeks; ++i) { System.out.println(&quot;Week: &quot; + i); for (int j = 1; j &lt;= days; ++j) { System.out.println(&quot; Day: &quot; + j); } } . Week: 1 Day: 1 Day: 2 Day: 3 Day: 4 Day: 5 Day: 6 Day: 7 Week: 2 Day: 1 Day: 2 Day: 3 Day: 4 Day: 5 Day: 6 Day: 7 Week: 3 Day: 1 Day: 2 Day: 3 Day: 4 Day: 5 Day: 6 Day: 7 . Unit 5: Classes . Classes are &quot;blueprints&quot; for instantiating objects | Classes contain the main method, methods, and constructors Main Method - Tests the class and creates attributes, fields, and properties | Method - Does the action of the class | Constructor - Creates the object Sets initial values for variables | Can run methods | A class can have multiple constructors | . | . | . Java Keywords . static . Objects cannot use or reference static variables and methods I&#39;m sure you&#39;ve gotten the cannot access static object error at least once, no? it cannot access the variable that is specifically configued to be inaccessible, shocking | . | . | Universially shared among objects | . this . Refers to constructor that this is called in | Eliminates confusion between attributes and parameters | . Access Modifiers . . Restricts scope of classes, variables, and functions | Security, prevents abuse of data and methods | Mostly used for encapsulation | . Unit 7: ArrayLists . ArrayList is reference type (mutuable and contains object references) Arrays cannot be changed | . | ArrayLists have special functions: | . Function Description . add(int index, element) | This method is used to add an element at a particular index in the list. | . addAll(int index, Collection collection) | This method is used to add all the elements in the given collection to the list. | . size() | This method is used to return the size of the list. | . clear() | This method is used to remove all the elements in the list. | . remove(element or int index) | This method removes an element from the specified index. | . get(int index) | This method returns elements at the specified index. | . isEmpty() | Returns true if the list is empty, else false. | . sort(Comparator comp) | This method is used to sort the elements of the list on the basis of the given comparator. | . Can use : in ArrayLists to transverse lenght of list and use object as | .",
            "url": "https://calrethonofmirkwood.github.io/csablog2/jupyter/2022/12/13/notes.html",
            "relUrl": "/jupyter/2022/12/13/notes.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Writing Classes Lesson",
            "content": "import java.util.Scanner; public class TwoDArray{ final static private int NUM_ROWS = 4; final static private int NUM_COLUMNS = 4; public int[][] getArray() { int[][] array = { { 4, 0, 7, 12}, { 8, 11, 5, 9}, { 13, 3, 6, 1}, { 10, 2, 15, 14} }; return array; } public void printArray(int[][] array) { // iterates through each row for (int row = 0; row &lt; NUM_ROWS; row++) { // iterates through each column for (int column = 0; column &lt; NUM_COLUMNS; column++){ System.out.printf(&quot;%d t&quot;, array[row][column]); } System.out.printf(&quot; n&quot;); } } public void reverseArray(int[][] array) { for (int row = NUM_ROWS - 1; row &gt;= 0; row--) { for (int column = NUM_COLUMNS - 1; column &gt;= 0; column--) { System.out.printf(&quot;%d t&quot;, array[row][column]); } System.out.printf(&quot; n&quot;); } } public void userArray(int[][] array) { Scanner scanner = new Scanner(System.in); System.out.printf(&quot;Enter a row: &quot;); int row = scanner.nextInt(); System.out.printf(&quot; nEnter a column: &quot;); int column = scanner.nextInt(); System.out.printf(&quot; nThe element you entered was [%d],[%d], which has the value: %d n&quot;, row, column, array[row][column]); scanner.close(); } public void product(int[][] array) { int sums = 0; for (int row = 0; row &lt; NUM_ROWS; row++) { int product = 1; for (int column = 0; column &lt; NUM_COLUMNS; column++) { product *= array[row][column]; } System.out.printf(&quot;%d n&quot;, product); sums += product; } System.out.printf(&quot; nSum of products: %d&quot;, sums); } public static void main(String[] Args) { TwoDArray a = new TwoDArray(); int[][] nums = a.getArray(); // print array System.out.printf(&quot;Part #1: n&quot;); a.printArray(nums); // reverses order of array System.out.printf(&quot; nPart #2: n&quot;); a.reverseArray(nums); // retrives prompted object from array System.out.printf(&quot; nPart #3: n&quot;); a.userArray(nums); // prints product of rows System.out.printf(&quot; nPart #4: n&quot;); a.product(nums); } } TwoDArray.main(null); . Part #1: 4 0 7 12 8 11 5 9 13 3 6 1 10 2 15 14 Part #2: 14 15 2 10 1 6 3 13 9 5 11 8 12 7 0 4 Part #3: Enter a row: Enter a column: The element you entered was [3],[2], which has the value: 15 Part #4: 0 3960 234 4200 Sum of products: 8394 .",
            "url": "https://calrethonofmirkwood.github.io/csablog2/jupyter/2022/12/13/arraylesson.html",
            "relUrl": "/jupyter/2022/12/13/arraylesson.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Writing Classes Lesson",
            "content": "public class teams { public String country; public double wtl; public String jerseycolor; public teams (String country, double wtl, String jerseycolor){ this.country = country; this.wtl = wtl; this.jerseycolor = jerseycolor; } public String getCountry(){ return country; } public double getWTL(){ return wtl; } public String getJerseyColor(){ return jerseycolor; } } public class Dictionopolis extends teams { public Dictionopolis(String country, double wtl, String jerseycolor){ super(country, wtl, jerseycolor); } } public class Digitopolis extends teams { public Digitopolis(String country, double wtl, String jerseycolor){ super(country, wtl, jerseycolor); } } public class Manchuria extends teams { public Manchuria(String country, double wtl, String jerseycolor){ super(country, wtl, jerseycolor); } } public class HRE extends teams { public HRE(String country, double wtl, String jerseycolor){ super(country, wtl, jerseycolor); } } public class Sealand extends teams { public Sealand(String country, double wtl, String jerseycolor){ super(country, wtl, jerseycolor); } } Dictionopolis dcp = new Dictionopolis(&quot;Dictionopolis&quot;, 1.984, &quot;Red&quot;); Digitopolis dgp = new Digitopolis(&quot;Digitopolis&quot;, 2.178, &quot;Blue&quot;); Manchuria mch = new Manchuria(&quot;Manchuria&quot;, 0.43, &quot;Yellow, Red, Blue, White, and Black&quot;); HRE hre = new HRE(&quot;Holy Roman Empire&quot;, 1.806, &quot;Yellow and Black&quot;); Sealand sld = new Sealand(&quot;Sealand&quot;, 90000, &quot;Red, White, and Black&quot;); . public class Person { private String name; private double birthday; private String favoritecolor; public Person (String name, double birthday, String favoritecolor){ this.name = name; this.birthday = birthday; this.favoritecolor = favoritecolor; } public String getName(){ return name; } public double getBirthday() { return birthday; } public String getFavoriteColor() { return favoritecolor; } } public class Student extends Person { private int grade; private double gpa; public Student (String name, double birthday, String favoritecolor, int grade, double gpa) { super(name, birthday, favoritecolor); this.grade = grade; this.gpa = gpa; } public int getGrade(){ return grade; } public double getGPA() { return gpa; } } Student stink = new Student(&quot;Stink&quot;, 2.29, &quot;Brown&quot;, 12, 1.31); System.out.println(stink.getName()); System.out.println(stink.getBirthday()); System.out.println(stink.getFavoriteColor()); System.out.println(stink.getGrade()); System.out.println(stink.getGPA()); . Stink 2.29 Brown 12 1.31 .",
            "url": "https://calrethonofmirkwood.github.io/csablog2/jupyter/2022/12/12/inheritencelesson.html",
            "relUrl": "/jupyter/2022/12/12/inheritencelesson.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Tri 2 FRQ 2019#1",
            "content": "2019 FRQ 1 . a) Write the static method numberOfLeapYears . public static int numberofLeapYears(int year1, int year2) { int count = 0; for(int i = year1; i&lt;=year2; i++){ if (i%4 == 0 || i% 100 == 0 || i%400 == 0) count++; } return count; } . b) Write the static method dayOfWeek . public static int dayofWeek(int month, int day, int year) { // assuming that both firstDayOfYear and dayOfYear are functional int firstDay = firstDayOfYear(year); int numDays = dayOfYear(month, day, year); int dayOfWeek = (firstDay + numDays - 1) % 7; return dayOfWeek; } .",
            "url": "https://calrethonofmirkwood.github.io/csablog2/jupyter/2022/11/17/frq1.html",
            "relUrl": "/jupyter/2022/11/17/frq1.html",
            "date": " • Nov 17, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Writing Classes Lesson",
            "content": "2021 FRA 1a . public class WordMatch { String secret; public WordMatch(String secret) { this.secret = secret; } public void scoreGuess(String guess) { int counter = 0; // for loop for first substring index for (int i = 0; i &lt; this.secret.length(); i++){ // loop for second substring index for (int j = i + 1; j &lt; this.secret.length() + 1; j++) { // if statement if (guess.equals(this.secret.substring(i,j))) { counter++; } } } // Returning a point value int points = counter * guess.length() * guess.length(); System.out.println(&quot;&quot; + guess + &quot; = &quot; + points); // return points; } } WordMatch game = new WordMatch(&quot;mississippi&quot;); game.scoreGuess(&quot;i&quot;); game.scoreGuess(&quot;iss&quot;); game.scoreGuess(&quot;issipp&quot;); game.scoreGuess(&quot;mississippi&quot;); WordMatch game = new WordMatch(&quot;aaaabb&quot;); game.scoreGuess(&quot;a&quot;); game.scoreGuess(&quot;aa&quot;); game.scoreGuess(&quot;aaa&quot;); game.scoreGuess(&quot;aabb&quot;); game.scoreGuess(&quot;c&quot;); . i = 4 iss = 18 issipp = 36 mississippi = 121 a = 4 aa = 12 aaa = 18 aabb = 16 c = 0 . 2021 FRQ 3a . public class ClubMembers { private ArrayList&lt;MemberInfo&gt; memberList; public void addMembers(String[] names, int gradYear) { for(name : names) { memberList.add(new MemberInfo(name, gradYear, true)); } } } .",
            "url": "https://calrethonofmirkwood.github.io/csablog2/jupyter/2022/10/20/classeslesson.html",
            "relUrl": "/jupyter/2022/10/20/classeslesson.html",
            "date": " • Oct 20, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Iteration Lesson",
            "content": "import java.util.Scanner; public class Checker { public static void main(String[] args) { int number; // Create a Scanner object for keyboard input. Scanner keyboard = new Scanner(System.in); // Get a number from the user. System.out.print(&quot;Enter a number in the range of 1 through 100: &quot;); number = keyboard.nextInt(); while ((number &gt; 100 || number &lt; 1)) { System.out.print(&quot;Invalid input. Enter a number in the range &quot; + &quot;of 1 through 100: &quot;); number = keyboard.nextInt(); } } } . public class LoopConversion { public static void main(String[] args) { int count = 0; //convert to for loop for(int i = 0;i &lt; 5; i++){ System.out.println(&quot;count is &quot; + ++count); } } } LoopConversion.main(null); . count is 1 count is 2 count is 3 count is 4 count is 5 . for(int i = 0;i &lt; 6;i++){ System.out.println(i); } int j = 0; while(j&lt;6){ System.out.println(j); j++; } public void recursionTry(int num){ System.out.println(num); num++; if (num &lt; 6) { recursionTry(num); } } recursionTry(0); . 0 1 2 3 4 5 0 1 2 3 4 5 0 1 2 3 4 5 . Homework prompt . import java.util.*; import java.lang.Math; public class guessNumber { private boolean correct = false; private int min, max, num, tries, count, guess = 0; public void guess(){ System.out.println(&quot;### NUMBER GUESSING GAME ###&quot;); Scanner sc = new Scanner(System.in); System.out.print(&quot;Choose minimum number: &quot;); min = sc.nextInt(); System.out.println(min); System.out.print(&quot;Choose maximum number: &quot;); max = sc.nextInt(); System.out.println(max); System.out.print(&quot;Choose no. of tries: &quot;); tries = sc.nextInt(); System.out.println(tries); num = ThreadLocalRandom.current().nextInt(min, max + 1); int count = 0; for (int i=0; i&lt;tries; i++){ count++; System.out.println(&quot;Try &quot;+(i+1)+&quot; of &quot;+tries); System.out.println(&quot;Guess a number from &quot;+min+&quot; to &quot;+max+&quot;: &quot;); guess = sc.nextInt(); System.out.print(guess + &quot;, &quot;); if (guess == num) { System.out.println(&quot;that&#39;s right!&quot;); break; } else if (num &lt; guess) System.out.println(&quot;guess is too high&quot;); else if (num &gt; guess) System.out.println(&quot;guess is too low&quot;); } if (correct) { System.out.println(&quot;Congratulations, you won the game in &quot;+count+&quot;tries!&quot;); } else System.out.println(&quot;You lost, the answer was &quot;+num); } public void guess(int num){ } } guessNumber run = new guessNumber(); run.guess(); . ### NUMBER GUESSING GAME ### Choose minimum number: 1 Choose maximum number: 100 Choose no. of tries: 10 Try 1 of 10 Guess a number from 1 to 100: 50, guess is too high Try 2 of 10 Guess a number from 1 to 100: 25, guess is too low Try 3 of 10 Guess a number from 1 to 100: 35, guess is too low Try 4 of 10 Guess a number from 1 to 100: 40, guess is too low Try 5 of 10 Guess a number from 1 to 100: 45, guess is too low Try 6 of 10 Guess a number from 1 to 100: 47, that&#39;s right! You lost, the answer was 47 .",
            "url": "https://calrethonofmirkwood.github.io/csablog2/jupyter/2022/10/19/iterationlesson.html",
            "relUrl": "/jupyter/2022/10/19/iterationlesson.html",
            "date": " • Oct 19, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Using Objects Lesson",
            "content": "Goblin Fight Hack . Add hit chance calculation . import java.util.*; public class Goblin { private String name; private int HP; private int DMG; private double hitChance; public String getName() { return name; } public int getHP() { return HP; } public int getDMG() { return DMG; } public double getHitChance() { return hitChance; } public boolean isAlive() { if (this.HP &gt; 0) { return true; } else { return false; } } public void setName(String newName) { this.name = newName; } public void setHP(int newHP) { this.HP = newHP; } public void takeDMG(int takenDamage) { this.HP -= takenDamage; } public void setDMG(int newDMG) { this.DMG = newDMG; } public void setHitChance(double newHitChance) { this.hitChance = newHitChance; } } public class Duel { public static void fight(Goblin goblin1, Goblin goblin2) { while (goblin1.isAlive() &amp;&amp; goblin2.isAlive()) { // goblin1 hit chance tester if (Math.random() &lt; goblin2.getHitChance()) { goblin2.takeDMG(goblin2.getDMG()); System.out.println(goblin1.getName() + &quot; takes &quot; + goblin2.getDMG() + &quot; damage&quot;); } else { System.out.println(goblin2.getName() + &quot; missed!&quot;); } // print hp of goblin1 System.out.println(goblin1.getName() + &quot; HP: &quot; + goblin1.getHP()); if (!goblin1.isAlive()) { System.out.println(goblin1.getName() + &quot; has perished&quot;); break; } // if statement for goblin2 hit chance if (Math.random() &lt; goblin1.getHitChance()) { goblin2.takeDMG(goblin1.getDMG()); System.out.println(goblin2.getName() + &quot; takes &quot; + goblin1.getDMG() + &quot; damage&quot;); } else { System.out.println(goblin1.getName() + &quot; missed!&quot;); } // print hp of goblin2 System.out.println(goblin2.getName() + &quot; HP: &quot; + goblin2.getHP()); if (!goblin2.isAlive()) { System.out.println(goblin2.getName() + &quot; has perished&quot;); break; } } } public static void main(String[] args) { Goblin goblin1 = new Goblin(); goblin1.setName(&quot;Thomas Jefferson&quot;); goblin1.setHP(12); goblin1.setDMG(2); goblin1.setHitChance(0.5); Goblin goblin2 = new Goblin(); goblin2.setName(&quot;George Washington&quot;); goblin2.setHP(4); goblin2.setDMG(1); goblin2.setHitChance(0.75); fight(goblin1, goblin2); } } Duel.main(null); . George Washington missed! Thomas Jefferson HP: 12 Thomas Jefferson missed! George Washington HP: 4 Thomas Jefferson takes 1 damage Thomas Jefferson HP: 12 Thomas Jefferson missed! George Washington HP: 3 George Washington missed! Thomas Jefferson HP: 12 Thomas Jefferson missed! George Washington HP: 3 Thomas Jefferson takes 1 damage Thomas Jefferson HP: 12 Thomas Jefferson missed! George Washington HP: 2 Thomas Jefferson takes 1 damage Thomas Jefferson HP: 12 Thomas Jefferson missed! George Washington HP: 1 George Washington missed! Thomas Jefferson HP: 12 George Washington takes 2 damage George Washington HP: -1 George Washington has perished . 2021 FRQ 1 . public class WordMatch { String secret; public WordMatch(String secret) { this.secret = secret; } public void scoreGuess(String guess) { int counter = 0; // for loop for first substring index for (int i = 0; i &lt; this.secret.length(); i++){ // loop for second substring index for (int j = i + 1; j &lt; this.secret.length() + 1; j++) { // if statement if (guess.equals(this.secret.substring(i,j))) { counter++; } } } // Returning a point value int points = counter * guess.length() * guess.length(); System.out.println(&quot;&quot; + guess + &quot; = &quot; + points); // return points; } } WordMatch game = new WordMatch(&quot;mississippi&quot;); game.scoreGuess(&quot;i&quot;); game.scoreGuess(&quot;iss&quot;); game.scoreGuess(&quot;issipp&quot;); game.scoreGuess(&quot;mississippi&quot;); WordMatch game = new WordMatch(&quot;aaaabb&quot;); game.scoreGuess(&quot;a&quot;); game.scoreGuess(&quot;aa&quot;); game.scoreGuess(&quot;aaa&quot;); game.scoreGuess(&quot;aabb&quot;); game.scoreGuess(&quot;c&quot;); . i = 4 iss = 18 issipp = 36 mississippi = 121 a = 4 aa = 12 aaa = 18 aabb = 16 c = 0 .",
            "url": "https://calrethonofmirkwood.github.io/csablog2/jupyter/2022/10/18/objectslesson.html",
            "relUrl": "/jupyter/2022/10/18/objectslesson.html",
            "date": " • Oct 18, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Boolean Lesson",
            "content": "2009 FRQ 3b . public class atteryCharger { public int getChargeStartTime(int chargeTime) { int starting = 0; for (int j = 1; j &lt; 24; j++) { if (this.getChargingCost(j, chargeTime) &lt; this.getChargingCost(starting, chargeTime)) starting = j; } return starting; } } BatteryCharger bat = new BatteryCharger(); bat.getChargeStartTime(6); . 2017 FRQ 1b . import java.util.*; public class Digits { private ArrayList&lt;Integer&gt; digitList; public Digits(int num) { digitList = new ArrayList&lt;Integer&gt;(); if (num==0){ digitList.add(new Integer(0)); } while (num &gt; 0) { digitList.add(0, new Integer(num % 10)); num /= 10; } } public boolean isStrictlyIncreasing() { boolean increase = true; for (int i = 0; i &lt; digitList.size() - 1; i++) { if (digitList.get(i).intValue() &gt;= digitList.get(i + 1).intValue()) { increase = false; return increase; } } return increase; } } System.out.println(new Digits(1356).isStrictlyIncreasing()); System.out.println(new Digits(1536).isStrictlyIncreasing()); . true false . 2019 FRQ 3b . public class Delimiters { private String openDel; private String closeDel; public Delimiters(String open, String close) { } public ArrayList&lt;String&gt; getDelimitersList(String[] tokens){ } public boolean isBalanced(ArrayList&lt;String&gt; delimiters) { int opencount = 0; int closecount = 0; for (int i = 0; i &lt; delimiters.size(); i++) { if (delimiters.get(i) == openDel) { opencount++; } else if (delimiter.get(i) == closeDel) { closecount++; } if (closecount &gt; opencount) { return false; } } return true; } } .",
            "url": "https://calrethonofmirkwood.github.io/csablog2/jupyter/2022/10/18/booleanlesson.html",
            "relUrl": "/jupyter/2022/10/18/booleanlesson.html",
            "date": " • Oct 18, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Primitives Lesson",
            "content": "Presentation Hacks . // Hack 3 int val = 205; for(int i=0; i&lt;5; i++) { val/=2; } System.out.print(val); // Hack 4 int i = 3; for(int j = 5;j &gt; 0; j--){ i+=i; } System.out.print(i); // Hack 5 int i = 100; double d = 4.55; double d2 = 3.75; int j = (int) (d*100 + d2); System.out.print(j); // Hack 6 int i = 5; int p =27; for(int l = 23; l &lt;p; l++){ i*=(l-22); } System.out.print(i); . 696458120 . FRQ 2006 - 2a,3a . // 2A public double purchasePrice(double x){ x *= 1.1; return x; } purchasePrice(6.50); . 7.15 . // 3A public class Customer { private String name; private int id; public Customer(String name, int idNum){ this.name = name; this.id = idNum; // idNum = this.idNum; }; public String getName(){ return name; }; public int getID(){ return id; }; public void compareCustomer(Customer x){ System.out.println(id - x.id); // return (id - x.id); }; } Customer c1 = new Customer(&quot;Smith&quot;, 1001); Customer c2 = new Customer(&quot;Anderson&quot;, 1002); Customer c3 = new Customer(&quot;Smith&quot;, 1003); c1.compareCustomer(c1); c1.compareCustomer(c2); c1.compareCustomer(c3); . 0 -1 -2 .",
            "url": "https://calrethonofmirkwood.github.io/csablog2/jupyter/2022/10/17/primitiveslesson.html",
            "relUrl": "/jupyter/2022/10/17/primitiveslesson.html",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://calrethonofmirkwood.github.io/csablog2/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post11": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://calrethonofmirkwood.github.io/csablog2/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://calrethonofmirkwood.github.io/csablog2/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://calrethonofmirkwood.github.io/csablog2/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}